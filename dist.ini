name             = Text-Levenshtein-XS
author           = ugexe <ugexe@cpan.org>
license          = Perl_5
copyright_holder = Nick Logan
main_module      = lib/Text/Levenshtein/XS.pm

[TravisYML]                             ; "chain" smoke testing
support_builddir   = 1
build_branch       = /^build\/.*/
post_install       = cpan-install --coverage
post_after_success = coverage-report

[RewriteVersion]                        ; rewrite $VERSION in files

[Git::Contributors]                     ; contributor list

[Git::GatherDir]                        ; everything from git ls-files
exclude_match    = ^Makefile(?:\.(?:PL|old))?$
exclude_match    = ^README(?:\.(?:pod|mkdn|txt|html))?$
exclude_match    = ^META(?:\.(?:json|yml))$
exclude_filename = LICENSE
exclude_filename = cpanfile
include_dotfiles = 1

[PruneCruft]                            ; remove default files
except = ^\.travis\.yml$                ; for dual travis-ci/dzil build

[GenerateFile / MANIFEST.SKIP]          ; make our default MANIFEST.SKIP
filename = MANIFEST.SKIP
content = ^MANIFEST\.SKIP$
content = ^\.
content = # Avoid version control files.
content = \bRCS\b
content = \bCVS\b
content = ,v$
content = \B\.svn\b
content = \b_darcs\b
content = # (.git only in top-level, hence it's blocked above)
content = # Avoid temp and backup files.
content = ~$
content = \.tmp$
content = \.old$
content = \.bak$
content = \..*?\.sw[po]$
content = \#$
content = \b\.#
content = # avoid OS X finder files
content = \.DS_Store$
content = # ditto for Windows
content = \bdesktop\.ini$
content = \b[Tt]humbs\.db$
content = # Avoid patch remnants
content = \.orig$
content = \.rej$

[ManifestSkip]                          ; don't put anything in MANIFEST.SKIP in the build

; file modifications
[InsertCopyright]
[PodWeaver]

; generated files
[License]
[ReadmeFromPod]                         ; make sure this runs after PodWeaver

; t tests
[Test::ReportPrereqs]                   ; show prereqs and versions in test output 

; xt tests
[Test::MinimumVersion]                  ; xt/release/minimum-version.t
max_target_perl = 5.8.9                 ; don't use syntax/features past 5.10
[Test::PodSpelling]                     ; xt/author/pod-spell.t
[Test::Perl::Critic]                    ; xt/author/critic.t
[MetaTests]                             ; xt/release/meta-yaml.t
[PodSyntaxTests]                        ; xt/release/pod-syntax.t
[PodCoverageTests]                      ; xt/release/pod-coverage.t
[Test::Portability]                     ; xt/release/portability.t (of file name)
options = test_one_dot = 0
[Test::Version]                         ; xt/release/test-version.t
is_strict   = 1
has_version = 1
[Test::Compile]                         ; xt/author/00-compile.t
fake_home = 1                           ; fakes $ENV{HOME} just in case
xt_mode   = 1                           ; make sure all files compile

; metadata
[AutoPrereqs]

[Authority]
authority  = cpan:UGEXE
do_munging = 0

[MinimumPerl]

[MetaNoIndex]
directory = t
directory = xt
directory = examples

[GithubMeta]
remote = origin
remote = github
issues = 1

[MetaProvides::Package]
meta_noindex = 1

[Prereqs::AuthorDeps]
[MetaYAML]
[MetaJSON]
[CPANFile]

; build system
[MakeMaker]                             ; create Makefile.PL

[Manifest]                              ; create MANIFEST (after all generated files)

[CopyFilesFromBuild]
copy = Makefile.PL
copy = .travis.yml

; before release
[PromptIfStale]                         ; check if build tools are out of data
module = Dist::Zilla
check_all_plugins = 1

[Git::CheckFor::CorrectBranch]
release_branch = build/release

[Git::Check]
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile
allow_dirty = README
allow_dirty = README.mkdn
allow_dirty = README.pod

[CheckMetaResources]                    ; ensure META has 'resources' data
[CheckPrereqsIndexed]                   ; ensure prereqs are on CPAN
[CheckChangesHasContent]                ; ensure Changes has been updated

; releaser
[RunExtraTests]                         ; ensure xt/ tests pass
[ConfirmRelease]

; after release
[Git::Commit / Commit_Dirty_Files]      ; commit Changes (as released)

[Git::Tag]
tag_format = release-%v

[Git::CommitBuild]
release_branch  = build/%b
release_message = Release: v%v%t (%h on %b)

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
 
[NextRelease]
[BumpVersionAfterRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
 
[Git::Push]                             ; push repo to remote
push_to = origin
push_to = build/dev