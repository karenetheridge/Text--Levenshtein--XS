name             = Text-Levenshtein-XS
author           = ugexe <ugexe@cpan.org>
license          = Perl_5
copyright_holder = Nick Logan
copyright_year   = 2014

[ReportPhase / Phase_Begins]    ; report on everything

; -- start off by bumping the version

; find the last tag, and bump to next version via Version::Next;
; if you need a different version number, set the V env. variable
[Git::NextVersion]
version_by_branch = 1

; -- basic dist skeleton

; gather everything in the distribution directory;
; exclude files added later via CopyFilesFromBuild
[GatherDir]
exclude_filename = Makefile.PL
exclude_filename = LICENSE
exclude_filename = cpanfile
[PruneCruft]  
[AutoPrereqs]                   ; automatically find our prereqs
[Prereqs::AuthorDeps]           ; add author prereqs to meta files as develop prereqs
[CPANFile]                      ; generate cpanfile from prereqs
[GenerateFile / MANIFEST.SKIP] ; make our default MANIFEST.SKIP
filename = MANIFEST.SKIP
content = # Top-level filter (only include the following...)
content = ^(?!(?:script|examples|lib|inc|t|xt|maint)/|(?:(?:Makefile|Build)\.PL|README|MANIFEST|LICEN(?:S|C)E|Changes|META\.(?:yml|json)|.*\.xs)$)
content = # Avoid version control files.
content = \bRCS\b
content = \bCVS\b
content = ,v$
content = \B\.svn\b
content = \b_darcs\b
content = # (.git only in top-level, hence it's blocked above)
content = # Avoid temp and backup files.
content = ~$
content = \.tmp$
content = \.old$
content = \.bak$
content = \..*?\.sw[po]$
content = \#$
content = \b\.#
content = # avoid OS X finder files
content = \.DS_Store$
content = # ditto for Windows
content = \bdesktop\.ini$
content = \b[Tt]humbs\.db$
content = # Avoid patch remnants
content = \.orig$
content = \.rej$
[ManifestSkip] ; don't put anything in MANIFEST.SKIP in the build
skipfile = MANIFEST.SKIP


; -- Generate tons of tests

[ReportVersions::Tiny]          ; report module versions used during installation
[Test::Compile]                 ; Create a t/00-compile.t file that auto-compiles every module in the dist
fake_home = 1                   ; fakes $ENV{HOME} just in case (for cpan smoke testers)
[Test::Perl::Critic]
critic_config = t/perlcriticrc
[Test::DistManifest]            ; tests correctness of the manifest
[Test::Version]                 ; makes sure there's a version
is_strict   = 0
has_version = 1
[MetaTests]                     ; test meta.yml
[Test::CPAN::Meta::JSON]        ; test meta.json
[Test::MinimumVersion]          ; tests for a minimum version
[MojibakeTests]                 ; test file encodings
[PodCoverageTests]              ; test pod coverage
[PodSyntaxTests]                ; test pod syntax
[Test::Portability]             ; test portability of file names
[Test::Synopsis]                ; make sure the synopsis is compilable ;doesn't work with heredocs
[Test::Pod::LinkCheck]          ; find broken links
[Test::CPAN::Changes]           ; test changelog conformance to CPAN standards
[Test::Kwalitee]                ; check kwalitee metric

; -- munge files

[Prepender]                     ; automatically add lines following the shebang in modules
copyright = 1
; authordep Dist::Zilla::Plugin::PkgVersion = 5.012
[PkgVersion]                    ; add package version; die if line inserted
die_on_line_insertion = 1
[PodWeaver]                     ; weave our POD and add useful boilerplate
; config_plugin = @Apocalyptic
; [LocaleMsgfmt]                  ; compile .po files to .mo files in share/locale
; locale = share/locale

; update the Changelog
[NextRelease]
time_zone = local
filename = Changes

; -- generate/process meta-information

[ExecDir]                       ; automatically install files from bin/ directory as executables ( if it exists )
dir = bin
[ShareDir]                      ; automatically install File::ShareDir files from share/ ( if it exists )
dir = share
[MinimumPerl]                   ; automatically find the minimum perl version required and add it to prereqs
[Bugtracker]
web    = http://github.com/%U/%s/issues
mailto = %U@cpan.org
[Metadata]
resources.homepage = https://metacpan.org/release/Text-Levenshtein-XS
[MetaConfig]                    ; dump dzil config into metadata
[MetaData::BuiltWith]           ; dump entire perl modules we used to build into metadata
[Repository]                    ; set git repository path by looking at git configs
git_remote = origin
url  = https://github.com/ugexe/Text--Levenshtein--XS.git
web  = https://github.com/ugexe/Text--Levenshtein--XS
[MetaResources]                 ; add arbitrary resources to metadata
license = http://dev.perl.org/licenses/

; generate meta files
[MetaNoIndex]                   ; tell PAUSE to not index those directories
directory = inc t xt examples share eg mylib
[MetaProvides::Package]         ; get provides from package definitions in files
meta_noindex = 1
[License]                       ; create LICENSE file
[MakeMaker]                     ; create Makefile.PL file
[ModuleBuild]                   ; create Build.PL file
[DualBuilders]                  ; have M::B and EU::MM but select only M::B as prereq
prefer = build
[MetaYAML]                      ; create META.yml file
; need to do `git config --global github.user USERNAME`
[GithubMeta]                    ; include Git info in Meta.yml
[MetaJSON]                      ; create META.json file
[ReadmeFromPod]                 ; create README file in build
[ReadmeAnyFromPod / ReadmeMkdnInRoot]   ; create markdown README file in the project root
type = markdown
location = root
[Manifest]                      ; create the MANIFEST file
; copy some helper files out of the build so contributors can just clone and build
[CopyFilesFromBuild]
copy = cpanfile
copy = Makefile.PL
copy = LICENSE

; -- pre-release

; Perform Git operations after a release or build
; [Git::Check]                    ; check for a clean state before release; always fails because build adds new files

[CheckChangesHasContent]        ; make sure you explained your changes :)
changelog = Changes
[TestRelease]                   ; make sure that we won't release a FAIL distro
[CheckPrereqsIndexed]           ; make sure that our prereqs actually exist on CPAN
[ConfirmRelease]                ; double-check that we ACTUALLY want a release

; -- test

[RunExtraTests]                 ; run the xt/ tests when `dzil test --release` is run

; -- release

; [UploadToCPAN]                  ; upload your dist to CPAN using CPAN::Uploader

; -- post-release
[ArchiveRelease]                ; archive our tarballs under releases/
directory = releases

[Clean]                         ; run dzil clean so we have/commit no cruft

[Git::Commit]                   ; commit the dzil-generated stuff (allow_dirty means commit it)
allow_dirty = README.mkdn
allow_dirty = Changes
allow_dirty = dist.ini
allow_dirty = Makefile.PL
allow_dirty = cpanfile
commit_msg = New CPAN release of %N - v%v%n%n%c
add_files_in = releases         ; add our release tarballs to the repo

; commit released build to "dev" branch
[Git::CommitBuild]
release_branch = dev/%b
message = Build of release v%v (%h on %b)

[Git::Tag]                      ; tag our new release
tag_format = v%v
branch = dev
tag_message = Tagged release %v
;NOTE: you'll have to tag the build manually

[Git::Push]                     ; automatically push to the "origin" defined in .git/config
push_to = origin HEAD:refs/heads/dev
;NOTE: you'll have to push the build manually

[ReportPhase / Phase_Ends]
